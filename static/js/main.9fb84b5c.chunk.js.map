{"version":3,"sources":["lib/NameForm.jsx","App.js","serviceWorker.js","index.js"],"names":["NameForm","useState","theirName","setTheirName","myName","setMyName","theirOrg","setTheirOrg","myOrg","setMyOrg","mtgDateOne","setMtgDateOne","mtgDateTwo","setMtgDateTwo","mtgDateThree","setMtgDateThree","Container","maxWidth","Box","my","className","FormControl","InputLabel","htmlFor","Input","value","onChange","e","target","TextField","label","type","Paper","elevation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9fb84b5c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { FormControl, InputLabel, Input,  } from '@material-ui/core';\n\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport Box from '@material-ui/core/Box';\n\nexport default function NameForm() {\n\n  const [theirName, setTheirName] = useState('人事 太郎');\n  const [myName, setMyName] = useState('面接 やる太郎');\n  const [theirOrg, setTheirOrg] = useState('GAFA 株式会社');\n  const [myOrg, setMyOrg] = useState('すごい大学');\n  const [mtgDateOne, setMtgDateOne] = useState('2020-10-01T10:30');\n  const [mtgDateTwo, setMtgDateTwo] = useState('2020-10-02T10:30');\n  const [mtgDateThree, setMtgDateThree] = useState('2020-10-03T10:30');\n\n\n  return (\n    <Container maxWidth='sm'>\n    <Box my={8}>\n    <div className='main'>\n      <h3>面談予約定型文メーカー</h3>\n      <FormControl >\n        <InputLabel htmlFor=\"my-input\">相手の名前</InputLabel>\n        <Input \n          value={theirName}\n          onChange={ e => setTheirName( e.target.value ) }\n        />\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"my-input\">自分の名前</InputLabel>\n        <Input \n          value={myName}\n          onChange={ e => setMyName( e.target.value ) }\n        />\n      </FormControl>\n      <Box my={1}>\n      <FormControl >\n        <InputLabel htmlFor=\"my-input\">相手の組織</InputLabel>\n        <Input \n          value={theirOrg}\n          onChange={ e => setTheirOrg( e.target.value ) }\n        />\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"my-input\">自分の組織</InputLabel>\n        <Input \n          value={myOrg}\n          onChange={ e => setMyOrg( e.target.value ) }\n        />\n      </FormControl>\n      </Box>\n      <Box my={1}>\n      <TextField\n        label=\"面接予定時間01\"\n        type=\"datetime-local\"\n        value={mtgDateOne}\n        onChange={ e => setMtgDateOne( e.target.value ) }\n      />\n      </Box>\n      <Box my={1}>\n      <TextField\n        label=\"面接予定時間02\"\n        type=\"datetime-local\"\n        value={mtgDateTwo}\n        onChange={ e => setMtgDateTwo( e.target.value ) }\n      />\n      </Box>\n      <Box my={1}>\n      <TextField\n        label=\"面接予定時間03\"\n        type=\"datetime-local\"\n        value={mtgDateThree}\n        onChange={ e => setMtgDateThree( e.target.value ) }\n      />\n      </Box>\n\n      <Box my={3}>\n        <Paper elevation={3}>\n          {theirOrg} {theirName} 様 <br/>\n          お世話になっております <br/>\n          {myOrg} {myName} です <br/>\n          <br/ >\n          面談の候補日ですが <br/ >\n          <br/>\n          {mtgDateOne} <br/>\n          {mtgDateTwo} <br/>\n          {mtgDateThree} <br/>\n          <br/ >\n          でお願い致します。\n          <br/ >\n          以上、よろしくお願い申し上げます。 <br/>\n          {myOrg} {myName}\n        </Paper>\n      </Box>\n    </div>\n    </Box>\n    </Container>\n  )\n}\n","import React from 'react';\nimport NameForm from './lib/NameForm'\n\nfunction App() {\n  return (\n    <div>\n      <NameForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}