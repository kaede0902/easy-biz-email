{"version":3,"sources":["lib/NameForm.jsx","App.js","serviceWorker.js","index.js"],"names":["NameForm","useState","theirName","setTheirName","myName","setMyName","className","FormControl","InputLabel","htmlFor","Input","id","aria-describedby","value","onChange","e","target","FormHelperText","Paper","elevation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAMe,SAASA,IAAY,IAAD,EAECC,mBAAS,aAFV,mBAE1BC,EAF0B,KAEfC,EAFe,OAGLF,mBAAS,UAHJ,mBAG1BG,EAH0B,KAGlBC,EAHkB,KAMjC,OACE,yBAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,YAApB,kCACA,kBAACC,EAAA,EAAD,CACEC,GAAG,WACHC,mBAAiB,iBACjBC,MAAOX,EACPY,SAAW,SAAAC,GAAC,OAAIZ,EAAcY,EAAEC,OAAOH,UAEzC,kBAACI,EAAA,EAAD,CAAgBN,GAAG,kBAAnB,iEAEF,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,YAApB,kCACA,kBAACC,EAAA,EAAD,CACEC,GAAG,WACHC,mBAAiB,iBACjBC,MAAOT,EACPU,SAAW,SAAAC,GAAC,OAAIV,EAAWU,EAAEC,OAAOH,UAEtC,kBAACI,EAAA,EAAD,CAAgBN,GAAG,kBAAnB,iEAGF,6BACE,kBAACO,EAAA,EAAD,CAAOC,UAAW,GAAlB,oDACYjB,EADZ,WACyB,6BADzB,sEAEc,6BAFd,yCAGWE,EAHX,iBAGsB,6BAHtB,kIAKwB,6BALxB,0GAOoB,6BAPpB,mCAQUA,KCjCHgB,MARf,WACE,OACE,6BACE,kBAACpB,EAAD,QCMcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4e283d9.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport '../styles/global.css'\nimport { FormControl, InputLabel, Input, FormHelperText } from '@material-ui/core';\n\nimport Paper from '@material-ui/core/Paper';\n\nexport default function NameForm() {\n\n  const [theirName, setTheirName] = useState('theirName');\n  const [myName, setMyName] = useState('myName');\n\n\n  return (\n    <div className='main'>\n      <FormControl>\n        <InputLabel htmlFor=\"my-input\">相手の名前</InputLabel>\n        <Input \n          id=\"my-input\" \n          aria-describedby=\"my-helper-text\" \n          value={theirName}\n          onChange={ e => setTheirName( e.target.value ) }\n        />\n        <FormHelperText id=\"my-helper-text\">相手の名前を入れてね</FormHelperText>\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"my-input\">自分の名前</InputLabel>\n        <Input \n          id=\"my-input\" \n          aria-describedby=\"my-helper-text\" \n          value={myName}\n          onChange={ e => setMyName( e.target.value ) }\n        />\n        <FormHelperText id=\"my-helper-text\">自分の名前を入れてね</FormHelperText>\n      </FormControl>\n\n      <div>\n        <Paper elevation={3}>\n          なんとか株式会社 {theirName} 様 <br/>\n          お世話になっております <br/>\n          どっか 大学の {myName} です <br/>\n\n          面談はあの日でよろしくお願い申し上げます。 <br/>\n\n          以上、よろしくお願い申し上げます。 <br/>\n          どっか 大学 {myName}\n        </Paper>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport NameForm from './lib/NameForm'\n\nfunction App() {\n  return (\n    <div>\n      <NameForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}